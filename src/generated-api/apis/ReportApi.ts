/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ReportFindAllResponse,
  ReportRequest,
} from '../models/index';
import {
    ReportFindAllResponseFromJSON,
    ReportFindAllResponseToJSON,
    ReportRequestFromJSON,
    ReportRequestToJSON,
} from '../models/index';

export interface CreateReportRequest {
    reportRequest: ReportRequest;
}

export interface DeleteReportRequest {
    reportId: number;
}

export interface GetReportsByCurrentUserRequest {
    projectId?: number;
    startDate?: Date;
    endDate?: Date;
}

export interface UpdateReportRequest {
    reportId: number;
    reportRequest: ReportRequest;
}

/**
 * 
 */
export class ReportApi extends runtime.BaseAPI {

    /**
     * 새로운 일일 업무 보고를 생성하는 POST API
     * 일일 업무 보고 생성
     */
    async createReportRaw(requestParameters: CreateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['reportRequest'] == null) {
            throw new runtime.RequiredError(
                'reportRequest',
                'Required parameter "reportRequest" was null or undefined when calling createReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportRequestToJSON(requestParameters['reportRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 새로운 일일 업무 보고를 생성하는 POST API
     * 일일 업무 보고 생성
     */
    async createReport(requestParameters: CreateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createReportRaw(requestParameters, initOverrides);
    }

    /**
     * 일일 업무 보고를 삭제하는 DELETE API
     * 일일 업무 보고 삭제
     */
    async deleteReportRaw(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['reportId'] == null) {
            throw new runtime.RequiredError(
                'reportId',
                'Required parameter "reportId" was null or undefined when calling deleteReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reports/{reportId}`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters['reportId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 일일 업무 보고를 삭제하는 DELETE API
     * 일일 업무 보고 삭제
     */
    async deleteReport(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReportRaw(requestParameters, initOverrides);
    }

    /**
     * 현재 로그인한 사용자의 업무보고 목록을 엑셀파일로 다운로드할 수 있는 GET API
     * 내 업무보고 엑셀파일 다운로드
     */
    async getExcelFileByCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reports/excel`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 현재 로그인한 사용자의 업무보고 목록을 엑셀파일로 다운로드할 수 있는 GET API
     * 내 업무보고 엑셀파일 다운로드
     */
    async getExcelFileByCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getExcelFileByCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * 현재 로그인한 사용자의 일일 업무 보고를 조회하는 API
     * 내 일일 업무 보고 조회
     */
    async getReportsByCurrentUserRaw(requestParameters: GetReportsByCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportFindAllResponse>> {
        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 현재 로그인한 사용자의 일일 업무 보고를 조회하는 API
     * 내 일일 업무 보고 조회
     */
    async getReportsByCurrentUser(requestParameters: GetReportsByCurrentUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportFindAllResponse> {
        const response = await this.getReportsByCurrentUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 일일 업무 보고를 수정하는 PUT API
     * 일일 업무 보고 수정
     */
    async updateReportRaw(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['reportId'] == null) {
            throw new runtime.RequiredError(
                'reportId',
                'Required parameter "reportId" was null or undefined when calling updateReport().'
            );
        }

        if (requestParameters['reportRequest'] == null) {
            throw new runtime.RequiredError(
                'reportRequest',
                'Required parameter "reportRequest" was null or undefined when calling updateReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reports/{reportId}`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters['reportId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReportRequestToJSON(requestParameters['reportRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 일일 업무 보고를 수정하는 PUT API
     * 일일 업무 보고 수정
     */
    async updateReport(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateReportRaw(requestParameters, initOverrides);
    }

}
