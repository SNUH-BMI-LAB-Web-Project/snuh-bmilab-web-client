/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommentFindAllResponse,
  CommentRequest,
} from '../models/index';
import {
    CommentFindAllResponseFromJSON,
    CommentFindAllResponseToJSON,
    CommentRequestFromJSON,
    CommentRequestToJSON,
} from '../models/index';

export interface CreateCommentRequest {
    commentRequest: CommentRequest;
}

export interface DeleteCommentRequest {
    commentId: number;
}

export interface GetAllCommentsRequest {
    domainType: GetAllCommentsDomainTypeEnum;
    entityId: number;
}

export interface UpdateCommentRequest {
    commentId: number;
    commentRequest: CommentRequest;
}

/**
 * 
 */
export class CommentApi extends runtime.BaseAPI {

    /**
     * 댓글을 생성하는 POST API
     * 댓글 생성
     */
    async createCommentRaw(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['commentRequest'] == null) {
            throw new runtime.RequiredError(
                'commentRequest',
                'Required parameter "commentRequest" was null or undefined when calling createComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentRequestToJSON(requestParameters['commentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 댓글을 생성하는 POST API
     * 댓글 생성
     */
    async createComment(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createCommentRaw(requestParameters, initOverrides);
    }

    /**
     * 댓글을 삭제하는 DELETE API
     * 댓글 삭제
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling deleteComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/comments/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 댓글을 삭제하는 DELETE API
     * 댓글 삭제
     */
    async deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCommentRaw(requestParameters, initOverrides);
    }

    /**
     * 댓글 목록을 조회하는 GET API
     * 댓글 목록 조회
     */
    async getAllCommentsRaw(requestParameters: GetAllCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentFindAllResponse>> {
        if (requestParameters['domainType'] == null) {
            throw new runtime.RequiredError(
                'domainType',
                'Required parameter "domainType" was null or undefined when calling getAllComments().'
            );
        }

        if (requestParameters['entityId'] == null) {
            throw new runtime.RequiredError(
                'entityId',
                'Required parameter "entityId" was null or undefined when calling getAllComments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domainType'] != null) {
            queryParameters['domainType'] = requestParameters['domainType'];
        }

        if (requestParameters['entityId'] != null) {
            queryParameters['entityId'] = requestParameters['entityId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 댓글 목록을 조회하는 GET API
     * 댓글 목록 조회
     */
    async getAllComments(requestParameters: GetAllCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentFindAllResponse> {
        const response = await this.getAllCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 댓글을 수정하는 PUT API
     * 댓글 수정
     */
    async updateCommentRaw(requestParameters: UpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling updateComment().'
            );
        }

        if (requestParameters['commentRequest'] == null) {
            throw new runtime.RequiredError(
                'commentRequest',
                'Required parameter "commentRequest" was null or undefined when calling updateComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/comments/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommentRequestToJSON(requestParameters['commentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 댓글을 수정하는 PUT API
     * 댓글 수정
     */
    async updateComment(requestParameters: UpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCommentRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetAllCommentsDomainTypeEnum = {
    Board: 'BOARD'
} as const;
export type GetAllCommentsDomainTypeEnum = typeof GetAllCommentsDomainTypeEnum[keyof typeof GetAllCommentsDomainTypeEnum];
