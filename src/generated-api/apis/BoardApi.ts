/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BoardDetail,
  BoardFindAllResponse,
  BoardRequest,
  ErrorResponse,
} from '../models/index';
import {
    BoardDetailFromJSON,
    BoardDetailToJSON,
    BoardFindAllResponseFromJSON,
    BoardFindAllResponseToJSON,
    BoardRequestFromJSON,
    BoardRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CreateBoardRequest {
    boardRequest: BoardRequest;
}

export interface DeleteBoardRequest {
    boardId: number;
}

export interface DeleteBoardFileRequest {
    boardId: number;
    fileId: string;
}

export interface GetAllBoardsRequest {
    search?: string;
    category?: string;
    page?: any;
    size?: any;
    sort?: Array<any>;
}

export interface GetBoardByIdRequest {
    boardId: number;
}

export interface UpdateBoardRequest {
    boardId: number;
    boardRequest: BoardRequest;
}

/**
 * 
 */
export class BoardApi extends runtime.BaseAPI {

    /**
     * 새로운 게시글을 작성하는 POST API
     * 게시글 작성
     */
    async createBoardRaw(requestParameters: CreateBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardRequest'] == null) {
            throw new runtime.RequiredError(
                'boardRequest',
                'Required parameter "boardRequest" was null or undefined when calling createBoard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/board`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardRequestToJSON(requestParameters['boardRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 새로운 게시글을 작성하는 POST API
     * 게시글 작성
     */
    async createBoard(requestParameters: CreateBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createBoardRaw(requestParameters, initOverrides);
    }

    /**
     * 게시글을 삭제하는 DELETE API
     * 게시글 삭제
     */
    async deleteBoardRaw(requestParameters: DeleteBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling deleteBoard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/board/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 게시글을 삭제하는 DELETE API
     * 게시글 삭제
     */
    async deleteBoard(requestParameters: DeleteBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBoardRaw(requestParameters, initOverrides);
    }

    /**
     * 게시글에서 첨부파일을 삭제하는 DELETE API
     * 게시글 첨부파일 삭제
     */
    async deleteBoardFileRaw(requestParameters: DeleteBoardFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling deleteBoardFile().'
            );
        }

        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling deleteBoardFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/board/{boardId}/file/{fileId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters['boardId']))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 게시글에서 첨부파일을 삭제하는 DELETE API
     * 게시글 첨부파일 삭제
     */
    async deleteBoardFile(requestParameters: DeleteBoardFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBoardFileRaw(requestParameters, initOverrides);
    }

    /**
     * 모든 게시글을 조회하는 GET API
     * 모든 게시글 조회
     */
    async getAllBoardsRaw(requestParameters: GetAllBoardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardFindAllResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/board`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 모든 게시글을 조회하는 GET API
     * 모든 게시글 조회
     */
    async getAllBoards(requestParameters: GetAllBoardsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardFindAllResponse> {
        const response = await this.getAllBoardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ID로 게시글을 상세 조회하는 GET API
     * 게시글 상세 조회
     */
    async getBoardByIdRaw(requestParameters: GetBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardDetail>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling getBoardById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/board/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardDetailFromJSON(jsonValue));
    }

    /**
     * ID로 게시글을 상세 조회하는 GET API
     * 게시글 상세 조회
     */
    async getBoardById(requestParameters: GetBoardByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardDetail> {
        const response = await this.getBoardByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시글을 수정하는 PUT API
     * 게시글 수정
     */
    async updateBoardRaw(requestParameters: UpdateBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling updateBoard().'
            );
        }

        if (requestParameters['boardRequest'] == null) {
            throw new runtime.RequiredError(
                'boardRequest',
                'Required parameter "boardRequest" was null or undefined when calling updateBoard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/board/{boardId}`.replace(`{${"boardId"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BoardRequestToJSON(requestParameters['boardRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 게시글을 수정하는 PUT API
     * 게시글 수정
     */
    async updateBoard(requestParameters: UpdateBoardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateBoardRaw(requestParameters, initOverrides);
    }

}
