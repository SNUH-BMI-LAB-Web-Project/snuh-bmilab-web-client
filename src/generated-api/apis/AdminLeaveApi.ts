/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LeaveFindAllResponse,
  RejectLeaveRequest,
} from '../models/index';
import {
    LeaveFindAllResponseFromJSON,
    LeaveFindAllResponseToJSON,
    RejectLeaveRequestFromJSON,
    RejectLeaveRequestToJSON,
} from '../models/index';

export interface ApproveLeaveRequest {
    leaveId: number;
}

export interface GetLeaves1Request {
    status?: GetLeaves1StatusEnum;
    page?: any;
    size?: any;
    sort?: Array<any>;
}

export interface RejectLeaveOperationRequest {
    leaveId: number;
    rejectLeaveRequest: RejectLeaveRequest;
}

/**
 * 
 */
export class AdminLeaveApi extends runtime.BaseAPI {

    /**
     * 휴가 요청을 승인하는 POST API
     * 휴가 승인
     */
    async approveLeaveRaw(requestParameters: ApproveLeaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['leaveId'] == null) {
            throw new runtime.RequiredError(
                'leaveId',
                'Required parameter "leaveId" was null or undefined when calling approveLeave().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/leaves/{leaveId}/approve`.replace(`{${"leaveId"}}`, encodeURIComponent(String(requestParameters['leaveId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 휴가 요청을 승인하는 POST API
     * 휴가 승인
     */
    async approveLeave(requestParameters: ApproveLeaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.approveLeaveRaw(requestParameters, initOverrides);
    }

    /**
     * 휴가 정보를 모두 조회하거나 기간별로 조회할 수 있는 GET API
     * (관리자) 전체 휴가 조회
     */
    async getLeaves1Raw(requestParameters: GetLeaves1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaveFindAllResponse>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/leaves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaveFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 휴가 정보를 모두 조회하거나 기간별로 조회할 수 있는 GET API
     * (관리자) 전체 휴가 조회
     */
    async getLeaves1(requestParameters: GetLeaves1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaveFindAllResponse> {
        const response = await this.getLeaves1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 휴가 요청을 반려하는 POST API
     * 휴가 반려
     */
    async rejectLeaveRaw(requestParameters: RejectLeaveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['leaveId'] == null) {
            throw new runtime.RequiredError(
                'leaveId',
                'Required parameter "leaveId" was null or undefined when calling rejectLeave().'
            );
        }

        if (requestParameters['rejectLeaveRequest'] == null) {
            throw new runtime.RequiredError(
                'rejectLeaveRequest',
                'Required parameter "rejectLeaveRequest" was null or undefined when calling rejectLeave().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/leaves/{leaveId}/reject`.replace(`{${"leaveId"}}`, encodeURIComponent(String(requestParameters['leaveId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RejectLeaveRequestToJSON(requestParameters['rejectLeaveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 휴가 요청을 반려하는 POST API
     * 휴가 반려
     */
    async rejectLeave(requestParameters: RejectLeaveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rejectLeaveRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetLeaves1StatusEnum = {
    Pending: 'PENDING',
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
} as const;
export type GetLeaves1StatusEnum = typeof GetLeaves1StatusEnum[keyof typeof GetLeaves1StatusEnum];
