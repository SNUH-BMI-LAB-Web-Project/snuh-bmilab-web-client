/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplyLeaveRequest,
  LeaveFindAllResponse,
  UserLeaveResponse,
} from '../models/index';
import {
    ApplyLeaveRequestFromJSON,
    ApplyLeaveRequestToJSON,
    LeaveFindAllResponseFromJSON,
    LeaveFindAllResponseToJSON,
    UserLeaveResponseFromJSON,
    UserLeaveResponseToJSON,
} from '../models/index';

export interface ApplyLeaveOperationRequest {
    applyLeaveRequest: ApplyLeaveRequest;
}

export interface GetLeavesRequest {
    startDate?: Date;
    endDate?: Date;
}

export interface GetLeavesByUserRequest {
    page?: any;
    size?: any;
    sort?: Array<any>;
}

/**
 * 
 */
export class LeaveApi extends runtime.BaseAPI {

    /**
     * 사용자가 휴가를 신청하는 POST API
     * 휴가 신청
     */
    async applyLeaveRaw(requestParameters: ApplyLeaveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applyLeaveRequest'] == null) {
            throw new runtime.RequiredError(
                'applyLeaveRequest',
                'Required parameter "applyLeaveRequest" was null or undefined when calling applyLeave().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/leaves`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplyLeaveRequestToJSON(requestParameters['applyLeaveRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 사용자가 휴가를 신청하는 POST API
     * 휴가 신청
     */
    async applyLeave(requestParameters: ApplyLeaveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applyLeaveRaw(requestParameters, initOverrides);
    }

    /**
     * 휴가 정보를 모두 조회하거나 기간별로 조회할 수 있는 GET API
     * 전체 휴가 조회
     */
    async getLeavesRaw(requestParameters: GetLeavesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaveFindAllResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/leaves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaveFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 휴가 정보를 모두 조회하거나 기간별로 조회할 수 있는 GET API
     * 전체 휴가 조회
     */
    async getLeaves(requestParameters: GetLeavesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaveFindAllResponse> {
        const response = await this.getLeavesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자의 휴가 정보를 조회하는 GET API
     * 사용자 휴가 조회
     */
    async getLeavesByUserRaw(requestParameters: GetLeavesByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLeaveResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/leaves/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLeaveResponseFromJSON(jsonValue));
    }

    /**
     * 사용자의 휴가 정보를 조회하는 GET API
     * 사용자 휴가 조회
     */
    async getLeavesByUser(requestParameters: GetLeavesByUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLeaveResponse> {
        const response = await this.getLeavesByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
