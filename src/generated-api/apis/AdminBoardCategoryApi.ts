/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BoardCategoryReqeust,
} from '../models/index';
import {
    BoardCategoryReqeustFromJSON,
    BoardCategoryReqeustToJSON,
} from '../models/index';

export interface CreateBoardCategoryRequest {
    boardCategoryReqeust: BoardCategoryReqeust;
}

export interface DeleteBoardCategoryRequest {
    categoryId: number;
}

export interface UpdateBoardCategoryRequest {
    categoryId: number;
    boardCategoryReqeust: BoardCategoryReqeust;
}

/**
 * 
 */
export class AdminBoardCategoryApi extends runtime.BaseAPI {

    /**
     * 새로운 게시판 분야를 추가하기 위한 POST API
     * 게시판 분야 추가
     */
    async createBoardCategoryRaw(requestParameters: CreateBoardCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardCategoryReqeust'] == null) {
            throw new runtime.RequiredError(
                'boardCategoryReqeust',
                'Required parameter "boardCategoryReqeust" was null or undefined when calling createBoardCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/boards/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardCategoryReqeustToJSON(requestParameters['boardCategoryReqeust']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 새로운 게시판 분야를 추가하기 위한 POST API
     * 게시판 분야 추가
     */
    async createBoardCategory(requestParameters: CreateBoardCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createBoardCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * 게시판 분야를 삭제하기 위한 DELETE API
     * 게시판 분야 삭제
     */
    async deleteBoardCategoryRaw(requestParameters: DeleteBoardCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling deleteBoardCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/boards/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 게시판 분야를 삭제하기 위한 DELETE API
     * 게시판 분야 삭제
     */
    async deleteBoardCategory(requestParameters: DeleteBoardCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBoardCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * 기존 게시판 분야를 수정하기 위한 PUT API
     * 게시판 분야 수정
     */
    async updateBoardCategoryRaw(requestParameters: UpdateBoardCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling updateBoardCategory().'
            );
        }

        if (requestParameters['boardCategoryReqeust'] == null) {
            throw new runtime.RequiredError(
                'boardCategoryReqeust',
                'Required parameter "boardCategoryReqeust" was null or undefined when calling updateBoardCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/boards/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BoardCategoryReqeustToJSON(requestParameters['boardCategoryReqeust']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 기존 게시판 분야를 수정하기 위한 PUT API
     * 게시판 분야 수정
     */
    async updateBoardCategory(requestParameters: UpdateBoardCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateBoardCategoryRaw(requestParameters, initOverrides);
    }

}
