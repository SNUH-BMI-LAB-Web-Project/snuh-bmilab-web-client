/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BoardRequest
 */
export interface BoardRequest {
    /**
     * 게시판 분야 ID
     * @type {number}
     * @memberof BoardRequest
     */
    boardCategoryId: number;
    /**
     * 게시판 제목
     * @type {string}
     * @memberof BoardRequest
     */
    title: string;
    /**
     * 게시판 내용
     * @type {string}
     * @memberof BoardRequest
     */
    content: string;
    /**
     * 일반 첨부파일 ID 리스트
     * @type {Array<string>}
     * @memberof BoardRequest
     */
    fileIds?: Array<string>;
    /**
     * 내용 이미지 파일 ID 리스트
     * @type {Array<string>}
     * @memberof BoardRequest
     */
    imageFileIds?: Array<string>;
}

/**
 * Check if a given object implements the BoardRequest interface.
 */
export function instanceOfBoardRequest(value: object): value is BoardRequest {
    if (!('boardCategoryId' in value) || value['boardCategoryId'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function BoardRequestFromJSON(json: any): BoardRequest {
    return BoardRequestFromJSONTyped(json, false);
}

export function BoardRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BoardRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'boardCategoryId': json['boardCategoryId'],
        'title': json['title'],
        'content': json['content'],
        'fileIds': json['fileIds'] == null ? undefined : json['fileIds'],
        'imageFileIds': json['imageFileIds'] == null ? undefined : json['imageFileIds'],
    };
}

export function BoardRequestToJSON(json: any): BoardRequest {
    return BoardRequestToJSONTyped(json, false);
}

export function BoardRequestToJSONTyped(value?: BoardRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'boardCategoryId': value['boardCategoryId'],
        'title': value['title'],
        'content': value['content'],
        'fileIds': value['fileIds'],
        'imageFileIds': value['imageFileIds'],
    };
}

