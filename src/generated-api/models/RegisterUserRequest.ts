/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSubAffiliationRequest } from './UserSubAffiliationRequest';
import {
    UserSubAffiliationRequestFromJSON,
    UserSubAffiliationRequestFromJSONTyped,
    UserSubAffiliationRequestToJSON,
    UserSubAffiliationRequestToJSONTyped,
} from './UserSubAffiliationRequest';
import type { UserEducationRequest } from './UserEducationRequest';
import {
    UserEducationRequestFromJSON,
    UserEducationRequestFromJSONTyped,
    UserEducationRequestToJSON,
    UserEducationRequestToJSONTyped,
} from './UserEducationRequest';

/**
 * 
 * @export
 * @interface RegisterUserRequest
 */
export interface RegisterUserRequest {
    /**
     * 사용자명
     * @type {string}
     * @memberof RegisterUserRequest
     */
    name: string;
    /**
     * 이메일 주소
     * @type {string}
     * @memberof RegisterUserRequest
     */
    email: string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof RegisterUserRequest
     */
    password: string;
    /**
     * 기관
     * @type {string}
     * @memberof RegisterUserRequest
     */
    organization: string;
    /**
     * 부서
     * @type {string}
     * @memberof RegisterUserRequest
     */
    department: string;
    /**
     * 구분 (있으면)
     * @type {string}
     * @memberof RegisterUserRequest
     */
    position?: RegisterUserRequestPositionEnum;
    /**
     * 서브 소속 (있으면)
     * @type {Array<UserSubAffiliationRequest>}
     * @memberof RegisterUserRequest
     */
    subAffiliations?: Array<UserSubAffiliationRequest>;
    /**
     * 권한
     * @type {string}
     * @memberof RegisterUserRequest
     */
    role: RegisterUserRequestRoleEnum;
    /**
     * 총 연차 개수
     * @type {number}
     * @memberof RegisterUserRequest
     */
    annualLeaveCount?: number;
    /**
     * 이미 사용한 연차 개수
     * @type {number}
     * @memberof RegisterUserRequest
     */
    usedLeaveCount?: number;
    /**
     * 연구 분야 ID 목록
     * @type {Array<number>}
     * @memberof RegisterUserRequest
     */
    categoryIds?: Array<number>;
    /**
     * 좌석 번호
     * @type {string}
     * @memberof RegisterUserRequest
     */
    seatNumber?: string;
    /**
     * 전화번호
     * @type {string}
     * @memberof RegisterUserRequest
     */
    phoneNumber?: string;
    /**
     * 학력
     * @type {Array<UserEducationRequest>}
     * @memberof RegisterUserRequest
     */
    educations?: Array<UserEducationRequest>;
    /**
     * 입사일
     * @type {Date}
     * @memberof RegisterUserRequest
     */
    joinedAt: Date;
}


/**
 * @export
 */
export const RegisterUserRequestPositionEnum = {
    Professor: 'PROFESSOR',
    CoPrincipalInvestigator: 'CO_PRINCIPAL_INVESTIGATOR',
    PostdoctoralResearcher: 'POSTDOCTORAL_RESEARCHER',
    PhdStudent: 'PHD_STUDENT',
    MastersStudent: 'MASTERS_STUDENT',
    TranslationalMedicineTrainee: 'TRANSLATIONAL_MEDICINE_TRAINEE',
    ResearcherOrIntern: 'RESEARCHER_OR_INTERN',
    AdministrativeStaff: 'ADMINISTRATIVE_STAFF'
} as const;
export type RegisterUserRequestPositionEnum = typeof RegisterUserRequestPositionEnum[keyof typeof RegisterUserRequestPositionEnum];

/**
 * @export
 */
export const RegisterUserRequestRoleEnum = {
    User: 'USER',
    Admin: 'ADMIN'
} as const;
export type RegisterUserRequestRoleEnum = typeof RegisterUserRequestRoleEnum[keyof typeof RegisterUserRequestRoleEnum];


/**
 * Check if a given object implements the RegisterUserRequest interface.
 */
export function instanceOfRegisterUserRequest(value: object): value is RegisterUserRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('organization' in value) || value['organization'] === undefined) return false;
    if (!('department' in value) || value['department'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('joinedAt' in value) || value['joinedAt'] === undefined) return false;
    return true;
}

export function RegisterUserRequestFromJSON(json: any): RegisterUserRequest {
    return RegisterUserRequestFromJSONTyped(json, false);
}

export function RegisterUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegisterUserRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'email': json['email'],
        'password': json['password'],
        'organization': json['organization'],
        'department': json['department'],
        'position': json['position'] == null ? undefined : json['position'],
        'subAffiliations': json['subAffiliations'] == null ? undefined : ((json['subAffiliations'] as Array<any>).map(UserSubAffiliationRequestFromJSON)),
        'role': json['role'],
        'annualLeaveCount': json['annualLeaveCount'] == null ? undefined : json['annualLeaveCount'],
        'usedLeaveCount': json['usedLeaveCount'] == null ? undefined : json['usedLeaveCount'],
        'categoryIds': json['categoryIds'] == null ? undefined : json['categoryIds'],
        'seatNumber': json['seatNumber'] == null ? undefined : json['seatNumber'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'educations': json['educations'] == null ? undefined : ((json['educations'] as Array<any>).map(UserEducationRequestFromJSON)),
        'joinedAt': (new Date(json['joinedAt'])),
    };
}

export function RegisterUserRequestToJSON(json: any): RegisterUserRequest {
    return RegisterUserRequestToJSONTyped(json, false);
}

export function RegisterUserRequestToJSONTyped(value?: RegisterUserRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'email': value['email'],
        'password': value['password'],
        'organization': value['organization'],
        'department': value['department'],
        'position': value['position'],
        'subAffiliations': value['subAffiliations'] == null ? undefined : ((value['subAffiliations'] as Array<any>).map(UserSubAffiliationRequestToJSON)),
        'role': value['role'],
        'annualLeaveCount': value['annualLeaveCount'],
        'usedLeaveCount': value['usedLeaveCount'],
        'categoryIds': value['categoryIds'],
        'seatNumber': value['seatNumber'],
        'phoneNumber': value['phoneNumber'],
        'educations': value['educations'] == null ? undefined : ((value['educations'] as Array<any>).map(UserEducationRequestToJSON)),
        'joinedAt': ((value['joinedAt']).toISOString().substring(0,10)),
    };
}

