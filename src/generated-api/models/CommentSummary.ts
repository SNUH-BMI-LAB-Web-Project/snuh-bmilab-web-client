/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';

/**
 * 
 * @export
 * @interface CommentSummary
 */
export interface CommentSummary {
    /**
     * 댓글 ID
     * @type {number}
     * @memberof CommentSummary
     */
    commentId?: number;
    /**
     * 작성자 정보
     * @type {UserSummary}
     * @memberof CommentSummary
     */
    user?: UserSummary;
    /**
     * 댓글 내용
     * @type {string}
     * @memberof CommentSummary
     */
    message?: string;
    /**
     * 댓글 도메인 타입
     * @type {string}
     * @memberof CommentSummary
     */
    domainType?: CommentSummaryDomainTypeEnum;
    /**
     * 댓글이 속한 엔티티 ID
     * @type {number}
     * @memberof CommentSummary
     */
    entityId?: number;
    /**
     * 댓글 작성 시간
     * @type {Date}
     * @memberof CommentSummary
     */
    createdAt?: Date;
    /**
     * 댓글 수정 시간
     * @type {Date}
     * @memberof CommentSummary
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const CommentSummaryDomainTypeEnum = {
    Board: 'BOARD'
} as const;
export type CommentSummaryDomainTypeEnum = typeof CommentSummaryDomainTypeEnum[keyof typeof CommentSummaryDomainTypeEnum];


/**
 * Check if a given object implements the CommentSummary interface.
 */
export function instanceOfCommentSummary(value: object): value is CommentSummary {
    return true;
}

export function CommentSummaryFromJSON(json: any): CommentSummary {
    return CommentSummaryFromJSONTyped(json, false);
}

export function CommentSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'commentId': json['commentId'] == null ? undefined : json['commentId'],
        'user': json['user'] == null ? undefined : UserSummaryFromJSON(json['user']),
        'message': json['message'] == null ? undefined : json['message'],
        'domainType': json['domainType'] == null ? undefined : json['domainType'],
        'entityId': json['entityId'] == null ? undefined : json['entityId'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function CommentSummaryToJSON(json: any): CommentSummary {
    return CommentSummaryToJSONTyped(json, false);
}

export function CommentSummaryToJSONTyped(value?: CommentSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'commentId': value['commentId'],
        'user': UserSummaryToJSON(value['user']),
        'message': value['message'],
        'domainType': value['domainType'],
        'entityId': value['entityId'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

