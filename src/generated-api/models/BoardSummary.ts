/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';
import type { BoardCategorySummary } from './BoardCategorySummary';
import {
    BoardCategorySummaryFromJSON,
    BoardCategorySummaryFromJSONTyped,
    BoardCategorySummaryToJSON,
    BoardCategorySummaryToJSONTyped,
} from './BoardCategorySummary';

/**
 * 
 * @export
 * @interface BoardSummary
 */
export interface BoardSummary {
    /**
     * 게시판 ID
     * @type {number}
     * @memberof BoardSummary
     */
    boardId?: number;
    /**
     * 작성자 정보
     * @type {UserSummary}
     * @memberof BoardSummary
     */
    author?: UserSummary;
    /**
     * 게시판 분야 정보
     * @type {BoardCategorySummary}
     * @memberof BoardSummary
     */
    boardCategory?: BoardCategorySummary;
    /**
     * 게시판 제목
     * @type {string}
     * @memberof BoardSummary
     */
    title?: string;
    /**
     * 조회수
     * @type {number}
     * @memberof BoardSummary
     */
    viewCount?: number;
    /**
     * 게시글 생성 일시
     * @type {Date}
     * @memberof BoardSummary
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the BoardSummary interface.
 */
export function instanceOfBoardSummary(value: object): value is BoardSummary {
    return true;
}

export function BoardSummaryFromJSON(json: any): BoardSummary {
    return BoardSummaryFromJSONTyped(json, false);
}

export function BoardSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): BoardSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'boardId': json['boardId'] == null ? undefined : json['boardId'],
        'author': json['author'] == null ? undefined : UserSummaryFromJSON(json['author']),
        'boardCategory': json['boardCategory'] == null ? undefined : BoardCategorySummaryFromJSON(json['boardCategory']),
        'title': json['title'] == null ? undefined : json['title'],
        'viewCount': json['viewCount'] == null ? undefined : json['viewCount'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
    };
}

export function BoardSummaryToJSON(json: any): BoardSummary {
    return BoardSummaryToJSONTyped(json, false);
}

export function BoardSummaryToJSONTyped(value?: BoardSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'boardId': value['boardId'],
        'author': UserSummaryToJSON(value['author']),
        'boardCategory': BoardCategorySummaryToJSON(value['boardCategory']),
        'title': value['title'],
        'viewCount': value['viewCount'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
    };
}

